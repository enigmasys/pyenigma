# generated by datamodel-codegen:
#   filename:  <stdin>

from __future__ import annotations

from typing import Any, Optional, Union

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated


class PastWeek(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    past_week: Annotated[
        Optional[dict[str, Any]], Field(alias='Past Week', title='Past Week')
    ] = None


class PastMonth(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    past_month: Annotated[
        Optional[dict[str, Any]], Field(alias='Past Month', title='Past Month')
    ] = None


class Now(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    now: Annotated[Optional[dict[str, Any]], Field(alias='Now', title='Now')] = None


class PastThreeDays(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    past_three_days: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Past Three Days', title='Past Three Days'),
    ] = None


class IPhone(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    i_phone: Annotated[
        Optional[dict[str, Any]], Field(alias='iPhone', title='iPhone')
    ] = None


class Android(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    android: Annotated[
        Optional[dict[str, Any]], Field(alias='Android', title='Android')
    ] = None


class Sleep(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    sleep: Annotated[
        Optional[dict[str, Any]], Field(alias='Sleep', title='Sleep')
    ] = None


class Activity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    activity: Annotated[
        Optional[dict[str, Any]], Field(alias='Activity', title='Activity')
    ] = None


class Suicide(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    suicide: Annotated[
        Optional[dict[str, Any]], Field(alias='Suicide', title='Suicide')
    ] = None


class Emotion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    emotion: Annotated[
        Optional[dict[str, Any]], Field(alias='Emotion', title='Emotion')
    ] = None


class Anhedonia(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    anhedonia: Annotated[
        Optional[dict[str, Any]], Field(alias='Anhedonia', title='Anhedonia')
    ] = None


class SocialCategory(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    social_category: Annotated[
        Optional[dict[str, Any]], Field(alias='SocialCategory', title='SocialCategory')
    ] = None


class EMA(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    configuration_file: Annotated[
        Optional[bool], Field(alias='Configuration File', title='Configuration File')
    ] = True
    question_window: Annotated[
        Optional[Union[PastWeek, PastMonth, Now, PastThreeDays]],
        Field(alias='Question Window', title='Question Window'),
    ] = None
    device: Annotated[
        Optional[Union[IPhone, Android]], Field(alias='Device', title='Device')
    ] = None
    category: Annotated[
        Optional[
            list[Union[Sleep, Activity, Suicide, Emotion, Anhedonia, SocialCategory]]
        ],
        Field(alias='Category', title='Category'),
    ] = None


class EcologicalMomentaryAssessment(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ema: Annotated[Optional[EMA], Field(alias='EMA', title='EMA')] = None


class HelsinkiAlto(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    helsinki_alto: Annotated[
        Optional[dict[str, Any]], Field(alias='Helsinki-Alto', title='Helsinki-Alto')
    ] = None


class Vanderbilt(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    vanderbilt: Annotated[
        Optional[dict[str, Any]], Field(alias='Vanderbilt', title='Vanderbilt')
    ] = None


class VUMC(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    vumc: Annotated[Optional[dict[str, Any]], Field(alias='VUMC', title='VUMC')] = None


class UCLA(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    ucla: Annotated[Optional[dict[str, Any]], Field(alias='UCLA', title='UCLA')] = None


class McLean(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    mc_lean: Annotated[
        Optional[dict[str, Any]], Field(alias='McLean', title='McLean')
    ] = None


class Cornell(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    cornell: Annotated[
        Optional[dict[str, Any]], Field(alias='Cornell', title='Cornell')
    ] = None


class UCSD(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    ucsd: Annotated[Optional[dict[str, Any]], Field(alias='UCSD', title='UCSD')] = None


class Stanford(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    stanford: Annotated[
        Optional[dict[str, Any]], Field(alias='Stanford', title='Stanford')
    ] = None


class MSSMMayberg(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    mssm_mayberg: Annotated[
        Optional[dict[str, Any]], Field(alias='MSSM-Mayberg', title='MSSM-Mayberg')
    ] = None


class MSSMMurrough(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    mssm_murrough: Annotated[
        Optional[dict[str, Any]], Field(alias='MSSM-Murrough', title='MSSM-Murrough')
    ] = None


class Princeton(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    princeton: Annotated[
        Optional[dict[str, Any]], Field(alias='Princeton', title='Princeton')
    ] = None


class Pittsburgh(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    pittsburgh: Annotated[
        Optional[dict[str, Any]], Field(alias='Pittsburgh', title='Pittsburgh')
    ] = None


class Collection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    study_name: Annotated[
        Optional[str], Field(alias='Study Name', title='Study Name')
    ] = None
    collection_site: Annotated[
        Optional[str], Field(alias='Collection Site', title='Collection Site')
    ] = None
    study_site: Annotated[
        Optional[
            Union[
                HelsinkiAlto,
                Vanderbilt,
                VUMC,
                UCLA,
                McLean,
                Cornell,
                UCSD,
                Stanford,
                MSSMMayberg,
                MSSMMurrough,
                Princeton,
                Pittsburgh,
            ]
        ],
        Field(alias='Study Site', title='Study Site'),
    ] = None


class Digital(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    digital_: Annotated[
        Optional[dict[str, Any]], Field(alias='Digital ', title='Digital ')
    ] = None


class Psychometrics(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    psychometrics: Annotated[
        Optional[dict[str, Any]], Field(alias='Psychometrics', title='Psychometrics')
    ] = None


class SyntheticEEG(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    synthetic_eeg: Annotated[
        Optional[dict[str, Any]], Field(alias='Synthetic EEG', title='Synthetic EEG')
    ] = None


class NeuropsychologicalAssessments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    neuropsychological_assessments: Annotated[
        Optional[dict[str, Any]],
        Field(
            alias='Neuropsychological Assessments',
            title='Neuropsychological Assessments',
        ),
    ] = None


class Genetics(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    genetics: Annotated[
        Optional[dict[str, Any]], Field(alias='Genetics', title='Genetics')
    ] = None


class EMRClinicalData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    emr_clinical_data: Annotated[
        Optional[dict[str, Any]],
        Field(alias='EMR Clinical Data', title='EMR Clinical Data'),
    ] = None


class BehavioralAssessments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    behavioral__assessments: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Behavioral  Assessments', title='Behavioral  Assessments'),
    ] = None


class EcologicalMomentaryAssessments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    ecological_momentary_assessments: Annotated[
        Optional[dict[str, Any]],
        Field(
            alias='Ecological Momentary Assessments',
            title='Ecological Momentary Assessments',
        ),
    ] = None


class NeurocognitiveTaskPerformance(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    neurocognitive_task_performance: Annotated[
        Optional[dict[str, Any]],
        Field(
            alias='Neurocognitive Task Performance',
            title='Neurocognitive Task Performance',
        ),
    ] = None


class AffectInterview(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    affect_interview: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Affect Interview', title='Affect Interview'),
    ] = None


class MRI(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    mri: Annotated[Optional[dict[str, Any]], Field(alias='MRI', title='MRI')] = None


class EEG(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    eeg: Annotated[Optional[dict[str, Any]], Field(alias='EEG', title='EEG')] = None


class LiquidMarkers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    liquid_markers: Annotated[
        Optional[dict[str, Any]], Field(alias='Liquid Markers', title='Liquid Markers')
    ] = None


class CategoryOfData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    modality: Annotated[
        Optional[
            Union[
                Digital,
                Psychometrics,
                SyntheticEEG,
                NeuropsychologicalAssessments,
                Genetics,
                EMRClinicalData,
                BehavioralAssessments,
                EcologicalMomentaryAssessments,
                NeurocognitiveTaskPerformance,
                AffectInterview,
                MRI,
                EEG,
                LiquidMarkers,
            ]
        ],
        Field(alias='Modality', title='Modality'),
    ] = None


class InputDataCollection(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection_: Annotated[
        Optional[Collection], Field(alias='Collection ', title='Collection ')
    ] = None
    category_of_data: Annotated[
        Optional[CategoryOfData],
        Field(alias='Category of Data', title='Category of Data'),
    ] = None


class UniversityOfTennesseeKnoxville(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    university_of_tennessee_knoxville: Annotated[
        Optional[dict[str, Any]],
        Field(
            alias='University of Tennessee Knoxville',
            title='University of Tennessee Knoxville',
        ),
    ] = None


class StanfordUniversity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    stanford_university: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Stanford University', title='Stanford University'),
    ] = None


class UniversityOfPittsburgh(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    university_of_pittsburgh: Annotated[
        Optional[dict[str, Any]],
        Field(alias='University of Pittsburgh', title='University of Pittsburgh'),
    ] = None


class HarvardMedicalSchool(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    harvard_medical_school: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Harvard Medical School', title='Harvard Medical School'),
    ] = None


class BrighamAndWomenSHospital(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    brigham_and_women_s_hospital: Annotated[
        Optional[dict[str, Any]],
        Field(
            alias="Brigham and Women's Hospital", title="Brigham and Women's Hospital"
        ),
    ] = None


class WeillCornellMedicine(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    weill_cornell_medicine: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Weill Cornell Medicine', title='Weill Cornell Medicine'),
    ] = None


class UniversityOfOxford(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    university_of_oxford: Annotated[
        Optional[dict[str, Any]],
        Field(alias='University of Oxford', title='University of Oxford'),
    ] = None


class VanderbiltUniversity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    vanderbilt_university: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Vanderbilt University', title='Vanderbilt University'),
    ] = None


class VanderbiltUniversityMedicalCenter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    vanderbilt_university_medical_center: Annotated[
        Optional[dict[str, Any]],
        Field(
            alias='Vanderbilt University Medical Center',
            title='Vanderbilt University Medical Center',
        ),
    ] = None


class McleanHospital(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    mclean_hospital: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Mclean Hospital', title='Mclean Hospital'),
    ] = None


class UniversityOfCaliforniaLosAngeles(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    university_of_california_los_angeles: Annotated[
        Optional[dict[str, Any]],
        Field(
            alias='University of California Los Angeles',
            title='University of California Los Angeles',
        ),
    ] = None


class PrincetonUniversity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    princeton_university: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Princeton University', title='Princeton University'),
    ] = None


class AltoUniversity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    alto_university: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Alto University', title='Alto University'),
    ] = None


class UniversityOfCaliforniaSanDiego(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    university_of_california_san_diego: Annotated[
        Optional[dict[str, Any]],
        Field(
            alias='University of California San Diego',
            title='University of California San Diego',
        ),
    ] = None


class IcahnSchoolOfMedicineAtMountSenai(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    icahn_school_of_medicine_at_mount_senai: Annotated[
        Optional[dict[str, Any]],
        Field(
            alias='Icahn School of Medicine at Mount Senai',
            title='Icahn School of Medicine at Mount Senai',
        ),
    ] = None


class UniversityOfHelsinki(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    university_of_helsinki: Annotated[
        Optional[dict[str, Any]],
        Field(alias='University of Helsinki', title='University of Helsinki'),
    ] = None


class Institution(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    pi: Annotated[Optional[str], Field(alias='PI', title='PI')] = None
    site_id: Annotated[Optional[str], Field(alias='siteId', title='siteId')] = None
    name: Annotated[
        Optional[
            Union[
                UniversityOfTennesseeKnoxville,
                StanfordUniversity,
                UniversityOfPittsburgh,
                HarvardMedicalSchool,
                BrighamAndWomenSHospital,
                WeillCornellMedicine,
                UniversityOfOxford,
                VanderbiltUniversity,
                VanderbiltUniversityMedicalCenter,
                McleanHospital,
                UniversityOfCaliforniaLosAngeles,
                PrincetonUniversity,
                AltoUniversity,
                UniversityOfCaliforniaSanDiego,
                IcahnSchoolOfMedicineAtMountSenai,
                UniversityOfHelsinki,
            ]
        ],
        Field(title='name'),
    ] = None


class Site(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    institution: Annotated[Optional[Institution], Field(title='institution')] = None


class Other(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    other: Annotated[
        Optional[dict[str, Any]], Field(alias='Other', title='Other')
    ] = None


class Mid(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    mid: Annotated[Optional[dict[str, Any]], Field(alias='Mid', title='Mid')] = None


class Post(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    post: Annotated[Optional[dict[str, Any]], Field(alias='Post', title='Post')] = None


class Baseline(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    baseline: Annotated[
        Optional[dict[str, Any]], Field(alias='Baseline', title='Baseline')
    ] = None


class PreScan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    pre_scan: Annotated[
        Optional[dict[str, Any]], Field(alias='Pre-Scan', title='Pre-Scan')
    ] = None


class Admission(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    admission: Annotated[
        Optional[dict[str, Any]], Field(alias='Admission', title='Admission')
    ] = None


class BaselineSelfReport(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    baseline_self_report: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Baseline self-report', title='Baseline self-report'),
    ] = None


class AlternativeBaseline(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    alternative_baseline: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Alternative baseline', title='Alternative baseline'),
    ] = None


class Discharge(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    discharge: Annotated[
        Optional[dict[str, Any]], Field(alias='Discharge', title='Discharge')
    ] = None


class FollowUp(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    follow_up: Annotated[
        Optional[dict[str, Any]], Field(alias='Follow-up', title='Follow-up')
    ] = None


class Enrollment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    enrollment: Annotated[
        Optional[dict[str, Any]], Field(alias='Enrollment', title='Enrollment')
    ] = None


class MRIScreening(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    mri_screening: Annotated[
        Optional[dict[str, Any]], Field(alias='MRI screening', title='MRI screening')
    ] = None


class Scan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    scan: Annotated[Optional[dict[str, Any]], Field(alias='Scan', title='Scan')] = None


class Screening(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    screening: Annotated[
        Optional[dict[str, Any]], Field(alias='Screening', title='Screening')
    ] = None


class Field1180Day(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    field_1_180_day: Annotated[
        Optional[dict[str, Any]], Field(alias='1-180 day', title='1-180 day')
    ] = None


class LessThan1Day(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    less_than_1_day: Annotated[
        Optional[dict[str, Any]],
        Field(alias='less than 1 day', title='less than 1 day'),
    ] = None


class Other2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    value: Annotated[Optional[str], Field(title='value')] = None


class Other1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    other: Annotated[Optional[Other2], Field(alias='Other', title='Other')] = None


class CollectionTime(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    collection_phase: Annotated[
        Optional[Union[Other, Mid, Post, Baseline]],
        Field(alias='Collection Phase', title='Collection Phase'),
    ] = None
    collection_event: Annotated[
        Optional[
            Union[
                PreScan,
                Admission,
                BaselineSelfReport,
                AlternativeBaseline,
                Discharge,
                FollowUp,
                Enrollment,
                MRIScreening,
                Scan,
                Screening,
                Baseline,
            ]
        ],
        Field(alias='Collection Event', title='Collection Event'),
    ] = None
    start_time: Annotated[
        Optional[str], Field(alias='Start Time', title='Start Time')
    ] = None
    end_time: Annotated[Optional[str], Field(alias='End Time', title='End Time')] = None
    collection_duration: Annotated[
        Optional[Union[Field1180Day, LessThan1Day, Other1]],
        Field(alias='Collection Duration', title='Collection Duration'),
    ] = None


class CollectionTiming(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection_time: Annotated[
        Optional[CollectionTime], Field(alias='CollectionTime', title='CollectionTime')
    ] = None


class Dropout(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    dropout: Annotated[
        Optional[dict[str, Any]], Field(alias='Dropout', title='Dropout')
    ] = None


class Completer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    completer: Annotated[
        Optional[dict[str, Any]], Field(alias='Completer', title='Completer')
    ] = None


class Active(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    active: Annotated[
        Optional[dict[str, Any]], Field(alias='Active', title='Active')
    ] = None


class ParticipantInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    participant_id: Annotated[
        Optional[str], Field(alias='ParticipantID', title='ParticipantID')
    ] = None
    participant_status: Annotated[
        Optional[Union[Dropout, Completer, Active]],
        Field(alias='ParticipantStatus', title='ParticipantStatus'),
    ] = None


class Clinical(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    length_of_current_mde: Annotated[
        Optional[float],
        Field(alias='Length of current MDE', title='Length of current MDE'),
    ] = None
    no__of_prior_md_es: Annotated[
        Optional[int], Field(alias='No. of prior MDEs', title='No. of prior MDEs')
    ] = None
    baseline_qids_score: Annotated[
        Optional[int], Field(alias='Baseline QIDS score', title='Baseline QIDS score')
    ] = None
    age_at_mdd_onset: Annotated[
        Optional[int], Field(alias='Age at MDD onset', title='Age at MDD onset')
    ] = None


class RiskFactors(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    stressful_life_events: Annotated[
        Optional[str],
        Field(alias='Stressful life events', title='Stressful life events'),
    ] = None
    parental_bonding: Annotated[
        Optional[str], Field(alias='Parental bonding', title='Parental bonding')
    ] = None
    personality: Annotated[
        Optional[str], Field(alias='Personality', title='Personality')
    ] = None
    social_life: Annotated[
        Optional[str], Field(alias='Social life', title='Social life')
    ] = None
    childhood_sexual_abuse: Annotated[
        Optional[str],
        Field(alias='Childhood sexual abuse', title='Childhood sexual abuse'),
    ] = None
    childhood_physical_abuse: Annotated[
        Optional[str],
        Field(alias='Childhood physical abuse', title='Childhood physical abuse'),
    ] = None
    childhood_trauma: Annotated[
        Optional[str], Field(alias='Childhood trauma', title='Childhood trauma')
    ] = None
    positive_family_history: Annotated[
        Optional[str],
        Field(alias='Positive Family History', title='Positive Family History'),
    ] = None


class UNKNOWN(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    unknown: Annotated[
        Optional[dict[str, Any]], Field(alias='UNKNOWN', title='UNKNOWN')
    ] = None


class YES(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    yes: Annotated[Optional[dict[str, Any]], Field(alias='YES', title='YES')] = None


class NO(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    no: Annotated[Optional[dict[str, Any]], Field(alias='NO', title='NO')] = None


class TreatmentHistory(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    previous_treatment: Annotated[
        Optional[Union[UNKNOWN, YES, NO]],
        Field(alias='Previous Treatment', title='Previous Treatment'),
    ] = None
    outcome: Annotated[Optional[str], Field(alias='Outcome', title='Outcome')] = None


class DBS(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    dbs_: Annotated[Optional[dict[str, Any]], Field(alias='DBS ', title='DBS ')] = None


class KetaminInfusion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    ketamin_infusion: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Ketamin Infusion', title='Ketamin Infusion'),
    ] = None


class SAINT(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    saint_: Annotated[
        Optional[dict[str, Any]], Field(alias='SAINT ', title='SAINT ')
    ] = None


class CBT(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    cbt: Annotated[Optional[dict[str, Any]], Field(alias='CBT', title='CBT')] = None


class TMS(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    tms_: Annotated[Optional[dict[str, Any]], Field(alias='TMS ', title='TMS ')] = None


class RTMS(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    r_tms: Annotated[Optional[dict[str, Any]], Field(alias='rTMS', title='rTMS')] = None


class TBS(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    tbs_: Annotated[Optional[dict[str, Any]], Field(alias='TBS ', title='TBS ')] = None


class ITBS(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    i_tbs: Annotated[Optional[dict[str, Any]], Field(alias='iTBS', title='iTBS')] = None


class UltrasoundPulsation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    ultrasound_pulsation: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Ultrasound Pulsation', title='Ultrasound Pulsation'),
    ] = None


class Pharmacological(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    pharmacological: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Pharmacological', title='Pharmacological'),
    ] = None


class CurrentTreatment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    treatment_type: Annotated[
        Optional[
            list[
                Union[
                    DBS,
                    KetaminInfusion,
                    SAINT,
                    CBT,
                    TMS,
                    RTMS,
                    TBS,
                    ITBS,
                    UltrasoundPulsation,
                    Pharmacological,
                ]
            ]
        ],
        Field(alias='Treatment Type', title='Treatment Type'),
    ] = None


class Social(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    zip: Annotated[Optional[str], Field(alias='ZIP', title='ZIP')] = None
    adversity_index: Annotated[
        Optional[str], Field(alias='Adversity Index', title='Adversity Index')
    ] = None
    years_of_education: Annotated[
        Optional[int], Field(alias='Years of education', title='Years of education')
    ] = None
    occupation: Annotated[
        Optional[str], Field(alias='Occupation', title='Occupation')
    ] = None
    children: Annotated[Optional[int], Field(alias='Children', title='Children')] = None
    country: Annotated[Optional[str], Field(alias='Country', title='Country')] = None
    state: Annotated[Optional[str], Field(alias='State', title='State')] = None


class Other3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    other: Annotated[
        Optional[dict[str, Any]], Field(alias='Other', title='Other')
    ] = None


class DidNotAnswerUnknown(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    did_not_answer_unknown: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Did not Answer/Unknown', title='Did not Answer/Unknown'),
    ] = None


class NonHispanicWhite(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    non_hispanic_white: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Non-Hispanic White', title='Non-Hispanic White'),
    ] = None


class NonHispanicBlack(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    non_hispanic_black: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Non-Hispanic Black', title='Non-Hispanic Black'),
    ] = None


class AsianPacificIslander(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    asian_pacific_islander: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Asian/Pacific-Islander', title='Asian/Pacific-Islander'),
    ] = None


class Hispanic(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    hispanic: Annotated[
        Optional[dict[str, Any]], Field(alias='Hispanic', title='Hispanic')
    ] = None


class SomethingElse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    something_else: Annotated[
        Optional[dict[str, Any]], Field(alias='Something else', title='Something else')
    ] = None


class Homosexual(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    homosexual: Annotated[
        Optional[dict[str, Any]], Field(alias='Homosexual', title='Homosexual')
    ] = None


class Heterosexual(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    heterosexual: Annotated[
        Optional[dict[str, Any]], Field(alias='Heterosexual', title='Heterosexual')
    ] = None


class Bisexual(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    bisexual: Annotated[
        Optional[dict[str, Any]], Field(alias='Bisexual', title='Bisexual')
    ] = None


class ChooseNotToDisclose(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    choose_not_to_disclose: Annotated[
        Optional[dict[str, Any]],
        Field(alias='Choose not to disclose', title='Choose not to disclose'),
    ] = None


class DoNotKnow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    do_not_know: Annotated[
        Optional[dict[str, Any]], Field(alias='Do not know', title='Do not know')
    ] = None


class Married(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    married: Annotated[
        Optional[dict[str, Any]], Field(alias='Married', title='Married')
    ] = None


class Single(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    single: Annotated[
        Optional[dict[str, Any]], Field(alias='Single', title='Single')
    ] = None


class Female(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    female: Annotated[
        Optional[dict[str, Any]], Field(alias='Female', title='Female')
    ] = None


class Unkown(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    unkown: Annotated[
        Optional[dict[str, Any]], Field(alias='Unkown', title='Unkown')
    ] = None


class Male(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    male: Annotated[Optional[dict[str, Any]], Field(alias='Male', title='Male')] = None


class FemaleToMale(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    female_to_male: Annotated[
        Optional[dict[str, Any]], Field(alias='Female-to-Male', title='Female-to-Male')
    ] = None


class AdditionalCategory1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    category: Annotated[Optional[str], Field(title='category')] = None


class AdditionalCategory(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    additional_category: Annotated[
        Optional[AdditionalCategory1],
        Field(alias='Additional category', title='Additional category'),
    ] = None


class MaleToFemale(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    male_to_female: Annotated[
        Optional[dict[str, Any]], Field(alias='Male-to-Female', title='Male-to-Female')
    ] = None


class NonConforming(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    non_conforming: Annotated[
        Optional[dict[str, Any]], Field(alias='Non-conforming', title='Non-conforming')
    ] = None


class Demographics(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    race: Annotated[
        Optional[
            Union[
                Other3,
                DidNotAnswerUnknown,
                NonHispanicWhite,
                NonHispanicBlack,
                AsianPacificIslander,
                Hispanic,
            ]
        ],
        Field(alias='Race', title='Race'),
    ] = None
    age: Annotated[Optional[int], Field(alias='Age', title='Age')] = None
    sexual_orientation: Annotated[
        Optional[
            Union[
                SomethingElse,
                DidNotAnswerUnknown,
                Homosexual,
                Heterosexual,
                Bisexual,
                ChooseNotToDisclose,
                DoNotKnow,
            ]
        ],
        Field(alias='Sexual Orientation', title='Sexual Orientation'),
    ] = None
    marital_status: Annotated[
        Optional[Union[DidNotAnswerUnknown, Married, Single]],
        Field(alias='Marital Status', title='Marital Status'),
    ] = None
    family_income: Annotated[
        Optional[str], Field(alias='Family Income', title='Family Income')
    ] = None
    sex_at_birth: Annotated[
        Optional[Union[Female, Unkown, Male]],
        Field(alias='Sex at Birth', title='Sex at Birth'),
    ] = None
    gender: Annotated[
        Optional[
            Union[
                FemaleToMale,
                AdditionalCategory,
                ChooseNotToDisclose,
                DidNotAnswerUnknown,
                Male,
                Female,
                MaleToFemale,
                NonConforming,
            ]
        ],
        Field(alias='Gender', title='Gender'),
    ] = None


class Left(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    left: Annotated[Optional[dict[str, Any]], Field(alias='Left', title='Left')] = None


class Right(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    right: Annotated[
        Optional[dict[str, Any]], Field(alias='Right', title='Right')
    ] = None


class Ambidextrous(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    ambidextrous: Annotated[
        Optional[dict[str, Any]], Field(alias='Ambidextrous', title='Ambidextrous')
    ] = None


class Physical(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    handidness: Annotated[
        Optional[Union[Left, Right, Ambidextrous]],
        Field(alias='Handidness', title='Handidness'),
    ] = None
    height_in_inches: Annotated[
        Optional[float], Field(alias='Height in Inches', title='Height in Inches')
    ] = None
    weight_in_pounds: Annotated[
        Optional[float], Field(alias='Weight in Pounds', title='Weight in Pounds')
    ] = None


class Participant(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    participant_info: Annotated[
        Optional[ParticipantInfo],
        Field(alias='Participant_Info', title='Participant_Info'),
    ] = None
    clinical: Annotated[
        Optional[Clinical], Field(alias='Clinical', title='Clinical')
    ] = None
    risk_factors: Annotated[
        Optional[RiskFactors], Field(alias='Risk factors', title='Risk factors')
    ] = None
    treatment_history: Annotated[
        Optional[TreatmentHistory],
        Field(alias='Treatment History', title='Treatment History'),
    ] = None
    current_treatment: Annotated[
        Optional[CurrentTreatment],
        Field(alias='Current Treatment', title='Current Treatment'),
    ] = None
    social: Annotated[Optional[Social], Field(alias='Social', title='Social')] = None
    demographics: Annotated[
        Optional[Demographics], Field(alias='Demographics', title='Demographics')
    ] = None
    physical: Annotated[
        Optional[Physical], Field(alias='Physical', title='Physical')
    ] = None


class EMATaxonomy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    ecological_momentary_assessment: Annotated[
        Optional[EcologicalMomentaryAssessment],
        Field(alias='Ecological Momentary Assessment'),
    ] = None
    input_data_collection: Annotated[
        Optional[InputDataCollection], Field(alias='Input Data Collection')
    ] = None
    site: Annotated[Optional[Site], Field(alias='Site')] = None
    collection_timing: Annotated[
        Optional[CollectionTiming], Field(alias='Collection Timing')
    ] = None
    participant: Annotated[Optional[Participant], Field(alias='Participant')] = None
